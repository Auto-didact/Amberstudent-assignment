# Entity
type Quiz {
  id: Int!
  userId: Int
  active: Boolean
  title: String
  description: String
  createdAt: String
  updatedAt: String
  user: User
  questions:[Question]
}

type Question {
  id: Int!
  quizId: Int!
  description: String!
  choices:[Choice]
  createdAt: String
  updatedAt: String
}

type Choice {
  id: Int!
  questionId: Int!
  description: String!
  createdAt: String
  updatedAt: String
}

type Answer {
  id: Int!
  questionId: Int!
  userId: Int!
  choiceId: Int!
  createdAt: String
  updatedAt: String
}

extend type Query {
  #get quizzes
  quizzes(filter: String): [Quiz]
  #get quiz by id
  quiz(id: Int!): Quiz
  #get answer
  answer(input: AnswerInput!): Answer
}

extend type Mutation {
  # Create new quiz
  addQuiz(input: AddQuizInput!): Quiz
  # Edit a quiz
  editQuiz(input: EditQuizInput!): Quiz
  # Delete quiz
  deleteQuiz(id:Int): Quiz
  # Add answer
  addAnswer(input: AnswerInput!): Answer
}

input AnswerInput {
  id: Int
  questionId: Int!
  userId: Int!
  choiceId: Int!
}

input QuestionInput {
  id: Int
  quizId: Int
  description: String!
  choices:[ChoiceInput]
}

input ChoiceInput {
  id: Int
  questionId: Int
  description: String! 
}

input AddQuizInput {
  userId: Int!
  active: Boolean!
  title: String!
  description: String!
  questions:[QuestionInput]
}

input EditQuizInput {
  id: Int!
  userId: Int!
  active: Boolean!
  title: String!
  description: String!
  questions:[QuestionInput]
}


# extend type Subscription {
#   subscriptionName: TypeName
# }
