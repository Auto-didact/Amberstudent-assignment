# Entity
type Comment {
  id: Int!
  content: String!
  user: User!
  createdAt: String!
  updatedAt: String!
}

type ReplyComment {
  id: Int!
  reference: Comment!
  comment: Comment!
  createdAt: String!
  updatedAt: String!
}

type BlogComment {
  id: Int!
  blog: Blog!
  comment: Comment!
  createdAt: String!
  updatedAt: String!
}

extend type Query {
  comments: [Comment]
  comment(id: Int!): Comment
  blogComments(blogId: Int): [BlogComment]
  commentReplies(referenceId: Int): [ReplyComment]
}

extend type Mutation {
  addComment(input: AddCommentInput!): Comment
  editComment(input: EditCommentInput!): Comment
  deleteComment(id: int!, ref: String!): Comment
}

input AddCommentInput {
  blogId: Int
  referenceId: Int
  userId: Int
  content: String!
}

input EditCommentInput {
  id: int!
  ref: String!
  userId: Int
  content: String!
}

extend type Subscription {
  replyCommentUpdated: UpdateReplyCommentPayload
  blogCommentUpdated: UpdateBlogCommentPayload
}

type UpdateReplyCommentPayload {
  mutation: String!
  node: ReplyComment!
}

type UpdateBlogCommentPayload {
  mutation: String!
  node: BlogComment!
}
